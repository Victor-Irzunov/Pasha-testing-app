import { ApiError } from "../error/ApiError.js";
import bcrypt from "bcrypt"
import { models } from "../models/models.js"
import jwt from 'jsonwebtoken'
// import { v4 as uuidv4 } from 'uuid'
import { validationResult } from "express-validator";


const generateJwt = (id, email, role) => {
	return jwt.sign(
		{ id, email, role },
		process.env.SECRET_KEY,
		{ expiresIn: '24h' }
	)
}

class UserController {
	async registration(req, res, next) {
		try {
			const errors = validationResult(req)
			if (!errors.isEmpty()) {
				return next(ApiError.badRequest("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", errors.array()))
			}
			const { email, password, role, name } = req.body
			if (!email || !password) return next(ApiError.badRequest('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ password'))

			const candidate = await models.User.findOne({ where: { email } })
			if (candidate) {
				return next(ApiError.badRequest('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'))
			}
			const admin = await models.User.findOne({ where: { role: 'ADMIN' } })
			if (admin) {
				return next(ApiError.badRequest('–ê–¥–º–∏–Ω–∏—Å—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'))
			}
			const hashPassword = await bcrypt.hash(password, 5)
			// const activationLink = uuidv4()

			const user = await models.User.create({ email, role, password: hashPassword, name })

			const token = generateJwt(user.id, user.email, user.role)


			// await mail.sendMailAction(email, `${process.env.API_URL}/api/user/activate/${activationLink}`)

			return res.json({ token })

		} catch (err) {
			console.log('üöÄ-error: ', err)
		}

	}

	async login(req, res, next) {
		try {
			const { email, password } = req.body
			const user = await models.User.findOne({ where: { email } })
			if (!user) {
				return next(ApiError.internal('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'))
			}

			let comparePassword = bcrypt.compareSync(password, user.password)
			if (!comparePassword) {
				return next(ApiError.internal('–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'))
			}

			const token = generateJwt(user.id, user.email, user.role)
			return res.json({ token })
		} catch (err) {
			console.log('üöÄüöÄ-error: ', err)
		}
	}

	async check(req, res, next) {
		try {
			const token = generateJwt(req.user.id, req.user.email, req.user.role)
			return res.json({ token })
		} catch (err) {
			console.log('üöÄüöÄüöÄ-error: ', err)
		}
	}

	async activate(req, res, next) {
		try {
			const activationLink = req.params.link
			const user = await models.User.findOne({ activationLink })
			console.log('user', user)
			if (!user) {
				throw new Error('–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏')
			}
			user.isActivated = true
			await user.save()

			return res.redirect(process.env.CLIENT_URL) //edit CLIENT_URL (react)

		} catch (e) {
			console.log('üöÄüöÄüöÄüöÄ-error: ', e)
		}
	}
}

export const userController = new UserController()
